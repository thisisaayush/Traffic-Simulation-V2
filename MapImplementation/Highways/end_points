end_points = [(10.1,4.8), (9.8,7.8), (1.2,5.8), (9.0,2.8), (7.2,2.8), (3.1,2.0), (2.7,4.8), (7.8, 10.4), (1.5,9.6), (3.4,10.8),
(7.5,10.8), (8.9,10.5), (10.1,9.6)]

endpoints = [(3.4,10.8),(1.5,9.6), (1.2,5.8), (2.7,4.8), (3.1,2.0), (7.5,10.8), (7.5, 10.2), (7.2,2.8)
             ,(8.9,10.5), (10.1,9.6), (9.8,7.8), (10.1,4.8), (9.0,2.8)]

coordinates = [((10.1,4.8), (9.0,4.8), (7.4,4.6), (4.2,4.0)),
               ((9.8,7.8), (9.1,7.2), (7.3,6.8), (4.2,6.1), (3.2,5.9), (1.2,5.8)),
               ((9.0,2.8), (9.0,4.8), (9.1,7.2), (9.1,10.2)),
               ((7.2,2.8),(7.4,4.6), (7.3,6.8), (7.5,10.0), (7.5,10.8)),
               ((2.7,4.8), (3.2,5.1), (4.2,6.1), (6.0,8.7), (6.5,9.4), (7.5,10.0), (7.5,10.2)),
               ((3.4,10.8), (3.2,5.9), (3.2,5.1),(3.1,4.1))]



import geopy.distance
import networkx as nx
import simpy

def shortest_path(coordinates, start, end, speed):
    graph = nx.Graph()
    for coord_tuple in coordinates:
        for i in range(len(coord_tuple)-1):
            edge_dist = geopy.distance.distance(coord_tuple[i], coord_tuple[i+1]).km
            edge_time = round(edge_dist/speed * 3600, 2)
            graph.add_edge(coord_tuple[i], coord_tuple[i+1], weight=edge_time)
    shortest_path = nx.shortest_path(graph, start, end, weight='weight')
    travel_times = []
    for i in range(len(shortest_path) - 1):
        edge_dist = geopy.distance.distance(shortest_path[i], shortest_path[i + 1]).km
        edge_time = round(edge_dist / speed * 3600, 2)
        travel_times.append(edge_time)
    print("{:<20}{}{}".format("Travel times:",travel_times, " seconds."))
    return shortest_path

coordinates = [((10.1,4.8), (9.0,4.8), (7.4,4.6), (4.2,4.0)),
               ((9.8,7.8), (9.1,7.2), (7.3,6.8), (4.2,6.1), (3.2,5.9), (1.2,5.8)),
               ((9.0,2.8), (9.0,4.8), (9.1,7.2), (9.1,10.2)),
               ((7.2,2.8),(7.4,4.6), (7.3,6.8), (7.5,10.0), (7.5,10.8)),
               ((2.7,4.8), (3.2,5.1), (4.2,6.1), (6.0,8.7), (6.5,9.4), (7.5,10.0), (7.5,10.2)),
               ((3.4,10.8), (3.2,5.9), (3.2,5.1),(3.1,4.1)),
               ((3.1,2.0), (3.1,4.1), (4.2,4.0), (7.8,9.4), (9.1,10.2),(8.9,10.5)),
               ((1.5,9.6), (6.0,8.7),(6.5,9.4), (7.8,9.4), (10.1,9.6))]
start = (10.1,4.8)
end = (7.5,10.8)
speed = 50
path = shortest_path(coordinates, (10.1,4.8), (7.5, 10.8), 60)
print("{:<20}{}".format("Coordinates: ", path))
